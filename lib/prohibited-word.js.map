{"version":3,"sources":["../src/prohibited-word.js"],"names":[],"mappings":"AAAA;;AAEA,SAAQ,UAAR,QAAyB,sBAAzB;;;;;AAKA,eAAe,UAAS,OAAT,EAAkB;AAC/B,QAAM,SAAS,IAAI,UAAJ,CAAe,OAAf,CAAf;AACA,QAAM,EAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,EAA+B,MAA/B,KAAyC,OAA/C;AACA,SAAO;AACL,KAAC,OAAO,GAAR,EAAa,IAAb,EAAmB;AACjB,UAAI,OAAO,WAAP,CACF,IADE,EACI,CAAC,OAAO,IAAR,EAAc,OAAO,KAArB,EAA4B,OAAO,UAAnC,CADJ,CAAJ,EACyD;AACvD;AACD;;AAED,YAAM,OAAO,UAAU,IAAV,CAAb;;AAEA,YAAM,QAAQ,KAAK,KAAL,CAAW,QAAX,CAAd;AACA,UAAI,KAAJ,EAAW;AACT,cAAM,WAAW,KAAK,SAAL,CAAe,MAAM,KAArB,CAAjB;AACA,eAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,CAAC,aAAD,GAAgB,QAAhB,EAAyB,CAAzB,CAAd,EAA2C;AACtD,iBAAO,MAAM;AADyC,SAA3C,CAAb;AAGD;AACF,KAhBI;;;;;;;AAuBL,KAAC,OAAO,QAAR,EAAkB,IAAlB,EAAwB;AACtB,YAAM,OAAO,QAAQ,SAAR,CAAkB,IAAlB,CAAb;AACA,YAAM,QAAQ,KAAK,KAAL,CAAW,YAAX,CAAd;AACA,UAAI,KAAJ,EAAW;AACT,eAAO,IAAP,EAAa,IAAI,QAAQ,SAAZ,CAAsB,CAAC,aAAD,GAAgB,IAAhB,EAAqB,CAArB,CAAtB,EAA+C;AAC1D,iBAAO,MAAM;AAD6C,SAA/C,CAAb;AAGD;AACF;AA/BI,GAAP;AAiCD","file":"prohibited-word.js","sourcesContent":["'use strict';\n\nimport {RuleHelper} from \"textlint-rule-helper\";\n/**\n * @param {RuleContext} context context\n * @return {XXX} XXX\n */\nexport default function(context) {\n  const helper = new RuleHelper(context);\n  const {Syntax, getSource, RuleError, report} = context;\n  return {\n    [Syntax.Str](node) {\n      if (helper.isChildNode(\n        node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote])) {\n        return;\n      }\n        // get text from node\n      const text = getSource(node);\n        // does text contain \"todo:\"?\n      const match = text.match(/todo:/i);\n      if (match) {\n        const todoText = text.substring(match.index);\n        report(node, new RuleError(`Found TODO: '${todoText}'`, {\n          index: match.index\n        }));\n      }\n    },\n      // Match Pattern\n      //\n      // # Header\n      // - [ ] Todo\n      // ^^^\n      // Hit!\n    [Syntax.ListItem](node) {\n      const text = context.getSource(node);\n      const match = text.match(/\\[\\s+\\]\\s/i);\n      if (match) {\n        report(node, new context.RuleError(`Found TODO: '${text}'`, {\n          index: match.index\n        }));\n      }\n    }\n  };\n}\n"]}